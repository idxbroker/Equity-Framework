<?php
/**
 * Equity Framework
 *
 * WARNING: This file is part of the core Equity Framework. DO NOT edit this file under any circumstances.
 * Please do all modifications in the form of a child theme.
 *
 * @package Equity\Classes
 * @author  IDX, LLC
 * @license GPL-2.0+
 * @link    
 */

/**
 * Top Bar Walker
 *
 * @since 1.0.0
 */
class Top_Bar_Walker extends Walker_Nav_Menu {
	/**
	 * @see Walker_Nav_Menu::start_lvl()
	 * @since 1.0.0
	 *
	 * @param string $output Passed by reference. Used to append additional content.
	 * @param int $depth Depth of page. Used for padding.
	*/
	function start_lvl( &$output, $depth = 0, $args = array() ) {
			$output .= "\n<ul class=\"sub-menu dropdown\">\n";
	}
	
	/**
	 * @see Walker_Nav_Menu::start_el()
	 * @since 1.0.0
	 *
	 * @param string $output Passed by reference. Used to append additional content.
	 * @param object $object Menu item data object.
	 * @param int $depth Depth of menu item. Used for padding.
	 * @param object $args
	 */
	function start_el( &$output, $object, $depth = 0, $args = array(), $current_object_id = 0 ) {
			$item_html = '';
			parent::start_el( $item_html, $object, $depth, $args );

			$output .= ( $depth == 0 ) ? '<li class="divider"></li>' : '';

			$classes = empty( $object->classes ) ? array() : ( array ) $object->classes;  

			if( in_array('label', $classes) ) {
				$item_html = preg_replace('/<a[^>]*>(.*)<\/a>/iU', '<label>$1</label>', $item_html);
			}

			if( in_array('divider', $classes) ) {
				$item_html = preg_replace( '/<a[^>]*>(.*)<\/a>/iU', '', $item_html );
			}

			// for adding icon classes - need to rewrite walker to add in between anchor element ($item_html)
			// foreach ( $classes as $class ) {
			// 	if( stristr($class, "fa-") ) {
			// 		$icon_class = $class;
			// 		$item_html = '<i class="fas ' . $icon_class . '"></i>' . $item_html;
			// 	}
			// }

			$output .= $item_html;
	}

	/**
	 * @see Walker::display_element()
	 * @since 1.0.0
	 * 
	 * @param object $element Data object
	 * @param array $children_elements List of elements to continue traversing.
	 * @param int $max_depth Max depth to traverse.
	 * @param int $depth Depth of current element.
	 * @param array $args
	 * @param string $output Passed by reference. Used to append additional content.
	 * @return null Null on failure with no changes to parameters.
	 */
	function display_element( $element, &$children_elements, $max_depth, $depth=0, $args, &$output ) {
			$element->has_children = !empty( $children_elements[$element->ID] );
			$element->classes[] = ( $element->current || $element->current_item_ancestor ) ? 'active' : '';
			$element->classes[] = ( $element->has_children ) ? 'has-dropdown' : '';

			parent::display_element( $element, $children_elements, $max_depth, $depth, $args, $output );
	}

}


/*
 * Description plus Icon walker (using fa-** classes from Font Awesome)
 *
 * @see http://wordpress.stackexchange.com/q/14037/
 * @author toscho, http://toscho.de
 */
class Description_Plus_Icon_Walker extends Walker_Nav_Menu {
	function start_el(&$output, $item, $depth = 0, $args = array(), $id = 0) {
	global $wp_query;

	$indent = ( $depth ) ? str_repeat( "\t", $depth ) : '';

	$class_names = $value = '';

	$classes = empty( $item->classes ) ? array() : (array) $item->classes;

	if ( $item->description ) {
	$classes[] = 'has-description';
	} else {
	$classes[] = 'no-description';
	}

	$classes[] = 'menu-item-' . $item->ID;

	$class_names = join( ' ', apply_filters( 'nav_menu_css_class', array_filter( $classes ), $item, $args ) );
	$class_names = $class_names ? ' class="' . esc_attr( $class_names ) . '"' : '';

	$id = apply_filters( 'nav_menu_item_id', 'menu-item-'. $item->ID, $item, $args );
	$id = $id ? ' id="' . esc_attr( $id ) . '"' : '';


	$output .= $indent . '<li' . $id . $value . $class_names .'>';

	// use the title as title attribute if none specified
	$attributes  = ! empty( $item->attr_title ) ? ' title="'  . esc_attr( $item->attr_title ) .'"' : ' title="' . $item->title . '"';
	$attributes .= ! empty( $item->target )     ? ' target="' . esc_attr( $item->target     ) .'"' : '';
	$attributes .= ! empty( $item->xfn )        ? ' rel="'    . esc_attr( $item->xfn        ) .'"' : '';
	$attributes .= ! empty( $item->url )        ? ' href="'   . esc_attr( $item->url        ) .'"' : '';

	$item_output = $args->before;

	$item_output .= '<a'. $attributes .'>';

	// add the icon markup if a class starting with fa- was given in the admin
	$item_output .= $this->equity_menu_icon_markup($classes);

	// wrap description and title in div if there is a description and a title
	if ( $item->description ) {
		$item_output .= '<div class="link-text">';
	}

	$item_output .= '<span class="link-title">';

	$item_output .= $args->link_before . apply_filters( 'the_title', $item->title, $item->ID ) . $args->link_after;

	$item_output .= '</span>';

	// append the description if available
	if ( $item->description ) {
	$item_output .= '<p class="description">' . esc_attr( $item->description ) . '</p>';
	}

	if ( $item->description ) {
		$item_output .= '</div>';
	}

	$item_output .= '</a>';

	$item_output .= $args->after;

	$output .= apply_filters( 'walker_nav_menu_start_el', $item_output, $item, $depth, $args );
	}

	/**
	 * Prepends an <i> tag to the list item if it has an icon class
	 *
	 * This allows users to add a font awesome icon class to a menu item
	 * in the admin. 
	 * 
	 * @param array $classes the classes assigned to the item
	 * @return string <i> tag with the icon class
	 */
	function equity_menu_icon_markup($classes) {

		$classes = (array) $classes;

		foreach($classes as $class) {
			if( stristr($class, "fa-") ) {
				$icon_class = $class;
				return '<i class="fas ' . $icon_class . '"></i>';
			}
		}
	}
}