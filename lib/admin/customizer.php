<?php
/**
 * Equity Framework
 *
 * WARNING: This file is part of the core Equity Framework. DO NOT edit this file under any circumstances.
 * Please do all modifications in the form of a child theme.
 *
 * @package Equity\Admin
 * @author  IDX, LLC
 * @license GPL-2.0+
 * @link    
 */

/**
 * @since  1.0
 */
abstract class EQUITY_Customizer_Base {

	/**
	 * Define defaults, call the `register` method, add css to head.
	 */
	public function __construct() {
		
		//** Register new customizer elements
		if ( method_exists( $this, 'register' ) ) {
			add_action( 'customize_register', array( $this, 'register' ), 15 );
			add_action( 'customize_register', 'equity_register_font_control' );
		} else {
			_doing_it_wrong( 'EQUITY_Customizer_Base', __( 'When extending EQUITY_Customizer_Base, you must create a register method.', 'equity' ) );
		}

		//* Customizer scripts
		if ( method_exists( $this, 'scripts' ) ) {
			add_action( 'customize_preview_init', 'scripts' );
		}

		//* Render CSS to head
		if ( method_exists( $this, 'render' ) ) {
			add_action( 'wp_head', array( $this, 'render' ), 15 );
		}

	}

	protected function get_field_name( $name ) {
		return sprintf( '%s[%s]', $this->settings_field, $name );
	}
	
	protected function get_field_id( $id ) {
		return sprintf( '%s[%s]', $this->settings_field, $id );
	}
	
	protected function get_field_value( $key ) {
		return equity_get_option( $key, $this->settings_field );
	}

	/**
	 * Generates a line of CSS for use in header output.
	 *
	 * If the setting ($mod_name) has no defined value, the CSS will not be output.
	 *
	 * @uses get_theme_mod()
	 * @param string $selector CSS selector
	 * @param string $style The name of the CSS property to modify
	 * @param string $mod_name The name of the theme_mod option to fetch
	 * @param string $prefix Optional. Anything that needs to be output before the CSS property
	 * @param string $postfix Optional. Anything that needs to be output after the CSS property
	 * @param bool $echo Optional. Whether to print directly to the page (default: true).
	 * @return string Returns a single line of CSS with selectors and a property.
	 * @since 1.0
	 */
	public static function generate_css( $selector, $style, $mod_name, $prefix = '', $postfix = '', $echo = true ) {

		$mod = get_theme_mod($mod_name);

		if ( empty($mod) ) {
			return '';
		}

		$output = sprintf('%s { %s:%s; }',
			$selector,
			$style,
			$prefix . $mod . $postfix
		);

		$output .= "\n";

		if ( $echo ) {
			echo $output;
		}

		return $output;
	}

	/**
	 * Output css conditionally
	 *
	 * @param string $css the css to output
	 * @param string $mod the mod to check against
	 * @param bool $active if true outputs the css when the mod is active
	 */
	public static function css($css, $mod, $active = 1) {

		$mod = get_theme_mod($mod);

		if ( empty($mod) && $active == 1 ) {
			return;
		}

		echo $css;
	}

	/**
	 * Output google font css
	 *
	 * @param string $mod the mod to check against
	 */
	public static function output_font_css($mod) {

		$mod = get_theme_mod($mod);

		if ( empty($mod) ) {
			return;
		}

		echo '@import url(http://fonts.googleapis.com/css?family=' . str_replace(' ', '+', $mod) . ':400,700);';
	}

	/**
	 * Convert Hex color to RGBA
	 * 
	 * @since 1.0
	 */
	public static function hex2rgba($color, $opacity = false) {
		$default = 'rgb(0,0,0)';
		//Return default if no color provided
		if(empty($color))
	          return $default; 

		//Sanitize $color if "#" is provided 
	        if ($color[0] == '#' ) {
	        	$color = substr( $color, 1 );
	        }

	        //Check if color has 6 or 3 characters and get values
	        if (strlen($color) == 6) {
	                $hex = array( $color[0] . $color[1], $color[2] . $color[3], $color[4] . $color[5] );
	        } elseif ( strlen( $color ) == 3 ) {
	                $hex = array( $color[0] . $color[0], $color[1] . $color[1], $color[2] . $color[2] );
	        } else {
	                return $default;
	        }

	        //Convert hexadec to rgb
	        $rgb =  array_map('hexdec', $hex);

	        //Check if opacity is set(rgba or rgb)
	        if($opacity){
	        	if(abs($opacity) > 1)
	        		$opacity = 1.0;
	        	$output = 'rgba('.implode(",",$rgb).','.$opacity.')';
	        } else {
	        	$output = 'rgb('.implode(",",$rgb).')';
	        }
	        //Return rgb(a) color string
	        return $output;
	}

	/**
	 * This will output the custom WordPress settings to the theme's WP head.
	 *
	 * Used by hook: 'wp_head'
	 *
	 * @see add_action('wp_head',$func)
	 */
	public function render() {
		?>
		<!-- begin Parent Customizer CSS -->
		<style type="text/css">
			<?php
			self::output_font_css('google_fonts');

			//* Google Fonts
			self::generate_css('
				body,
				p,
				ul,
				ol,
				h1,
				h2,
				h2 a,
				h3,
				h4,
				h5,
				h6,
				input,
				button,
				select,
				textarea',
				'font-family', 'google_fonts'
			);

			?>
		</style>
		<!-- end Parent Customizer CSS -->
		<?php
	}
	
}

/**
 * 
 */
class EQUITY_Customizer extends EQUITY_Customizer_Base {

	/**
	 * Settings field.
	 */
	public $settings_field = 'equity-settings';

	/**
	 *
	 */
	public function register( $wp_customize ) {

		$this->header( $wp_customize );

		$this->color_scheme( $wp_customize );
		$this->layout( $wp_customize );

		$this->footer_widgets( $wp_customize );

		// if ( current_theme_supports( 'equity-breadcrumbs' ) ) {
		// 	$this->breadcrumbs( $wp_customize );
		// }

		$this->comments( $wp_customize );
		$this->archives( $wp_customize );
		
		// $this->fonts( $wp_customize );

		$this->reset( $wp_customize );
		
	}

	private function header( $wp_customize ) {

		global $wp_version;

		//* Setting key and default value array
		$settings = array(
			'logo_display_type' => 'text',
			'logo_image'        => '',
			'favicon'           => '',
			'apple_touch_icon'  => ''
		);

		foreach ( $settings as $setting => $default ) {

			$wp_customize->add_setting(
				$setting,
				array(
					'default' => $default,
					'type'    => 'theme_mod'
				)
			);

		}

		if( current_theme_supports('site-logo') && !class_exists('Site_Logo') ) {
			//* Logo Display Type
			$wp_customize->add_control(
				'logo_display_type',
				array(
					'label'      => __( 'Logo Display Type', 'equity' ),
					'section'    => 'title_tagline',
					'settings'   => 'logo_display_type',
					'priority'   => 100,
					'type'       => 'radio',
					'choices'    => array(
						'image'  => __( 'Custom Image', 'equity' ),
						'text'   => __( 'Use site title as logo', 'equity' )
					)
				)
			);

			//* Logo Image
			$wp_customize->add_control(
				new WP_Customize_Image_Control(
					$wp_customize,
					'logo_image',
					array(
						'label'       => __( 'Custom Logo', 'equity' ),
						'description' => __( 'Upload an image in <strong>.PNG</strong>, <strong>.JPG</strong> or <strong>.GIF</strong> format. <p style="font-style: normal;">Optimal size: 400x80</p>', 'equity' ),
						'section'     => 'title_tagline',
						'settings'    => 'logo_image',
						'extensions'  => array( 'png', 'jpg', 'gif' ),
						'priority'    => 100
					)
				)
			);
		}

		// Don't load if a site icon has been set
		if ( ! has_site_icon() ) {
			//* Favicon
			$wp_customize->add_control(
				new WP_Customize_Image_Control(
					$wp_customize,
					'favicon',
					array(
						'label'       => __( 'Favicon image', 'equity' ),
						'description' => __( '<strong>Deprecated! <em>Use "Site Icon" setting above.</em></strong>', 'equity' ),
						'section'     => 'title_tagline',
						'settings'    => 'favicon',
						'extensions'  => array( '' ),
						'priority'    => 200
					)
				)
			);

			//* Apple Touch Icon
			$wp_customize->add_control(
				new WP_Customize_Image_Control(
					$wp_customize,
					'apple_touch_icon',
					array(
						'label'       => __( 'Apple Touch Icon', 'equity' ),
						'description' => __( '<strong>Deprecated!</strong> <em>Use "Site Icon" setting above.</em></strong>', 'equity' ),
						'section'     => 'title_tagline',
						'settings'    => 'apple_touch_icon',
						'extensions'  => array( '' ),
						'priority'    => 200
					)
				)
			);
		}
		
	}

	private function color_scheme( $wp_customize ) {
		
		//** Color Selector
		if ( ! current_theme_supports( 'equity-style-selector' ) )
			return;

		$styles = get_theme_support( 'equity-style-selector' );

		//** Add Section
		$wp_customize->add_section(
			'equity_color_scheme',
			array(
				'title'    => __( 'Preset Colors', 'equity'),
				'priority' => 200,
			)
		);

		$wp_customize->add_setting(
			'style_selection',
			array(
				'default' => '',
				'type'    => 'theme_mod',
			)
		);

		$wp_customize->add_control(
			'equity_color_scheme',
			array(
				'label'    => __( 'Select Color Style', 'equity'),
				'section'  => 'equity_color_scheme',
				'settings' => 'style_selection',
				'type'     => 'select',
				'choices'  => array_merge(
					array( '' => __( 'Default', 'equity') ),
					array_shift( $styles )
				),
			)
		);
		
	}
	
	private function layout( $wp_customize ) {
		
		$wp_customize->add_section(
			'equity_layout',
			array(
				'title'    => __( 'Site Layout', 'equity' ),
				'priority' => 400,
			)
		);

		$wp_customize->add_setting(
			$this->get_field_name( 'site_layout' ),
			array(
				'default' => equity_get_default_layout(),
				'type'    => 'option',
			)
		);

		$wp_customize->add_control(
			'equity_layout',
			array(
				'label'    => __('Select Default Layout', 'equity'),
				'section'  => 'equity_layout',
				'settings' => $this->get_field_name( 'site_layout' ),
				'type'     => 'select',
				'choices'  => equity_get_layouts_for_customizer(),
			)
		);
		
	}

	private function footer_widgets( $wp_customize ) {
		
		//** Add Section
		$wp_customize->add_section(
			'equity_footer_widgets',
			array(
				'title'    => __( 'Footer Widgets', 'equity'),
				'priority' => 300,
			)
		);

		$wp_customize->add_setting(
			'footer_widgets',
			array(
				'default' => '',
				'type'    => 'theme_mod',
			)
		);

		$wp_customize->add_control(
			'equity_footer_widgets',
			array(
				'label'    => __( 'Select Number of Footer Widgets', 'equity'),
				'section'  => 'equity_footer_widgets',
				'settings' => 'footer_widgets',
				'type'     => 'select',
				'choices'  => array(
					'0'     => __( 'Zero', 'equity' ),
					'1'     => __( 'One', 'equity' ),
					'2'     => __( 'Two', 'equity' ),
					'3'     => __( 'Three', 'equity' ),
					'4'     => __( 'Four', 'equity' ),
				),
			)
		);
		
	}

	// private function breadcrumbs( $wp_customize ) {

	// 	$wp_customize->add_section(
	// 		'equity_breadcrumbs',
	// 		array(
	// 			'title'    => __('Breadcrumbs', 'equity'),
	// 			'priority' => 150,
	// 		)
	// 	);

	// 	$settings = array(
	// 		'breadcrumb_home'       => __( 'Homepage', 'equity'),
	// 		'breadcrumb_front_page' => __( 'Front Page', 'equity'),
	// 		'breadcrumb_posts_page' => __( 'Posts Page', 'equity'),
	// 		'breadcrumb_single'     => __( 'Single', 'equity'),
	// 		'breadcrumb_page'       => __( 'Page', 'equity'),
	// 		'breadcrumb_archive'    => __( 'Archive', 'equity'),
	// 		'breadcrumb_404'        => __( '404', 'equity'),
	// 		'breadcrumb_attachment' => __( 'Attachment/Media', 'equity'),
	// 	);

	// 	$priority = 1;

	// 	foreach ( $settings as $setting => $label ) {

	// 		$wp_customize->add_setting(
	// 			$this->get_field_name( $setting ),
	// 			array(
	// 				'default' => 0,
	// 				'type'    => 'option',
	// 			)
	// 		);

	// 		$wp_customize->add_control(
	// 			'equity_' . $setting,
	// 			array(
	// 				'priority' => $priority,
	// 				'label'    => $label,
	// 				'section'  => 'equity_breadcrumbs',
	// 				'settings' => $this->get_field_name( $setting ),
	// 				'type'     => 'checkbox',
	// 			)
	// 		);

	// 		$priority++;

	// 	}

	// }

	private function comments( $wp_customize ) {

		$wp_customize->add_section(
			'equity_comments',
			array(
				'title'    => __( 'Comments and Trackbacks', 'equity' ),
				'priority' => 400,
			)
		);

		$settings = array(
			'comments_posts'   => __( 'Enable Comments on Posts?', 'equity' ),
			'comments_pages'   => __( 'Enable Comments on Pages?', 'equity' ),
			'trackbacks_posts' => __( 'Enable Trackbacks on Posts?', 'equity' ),
			'trackbacks_pages' => __( 'Enable Trackbacks on Pages?', 'equity' ),
		);

		foreach ( $settings as $setting => $label ) {

			$wp_customize->add_setting(
				$this->get_field_name( $setting ),
				array(
					'default' => 1,
					'type'    => 'option',
				)
			);

			$wp_customize->add_control(
				'equity_' . $setting,
				array(
					'label'    => $label,
					'section'  => 'equity_comments',
					'settings' => $this->get_field_name( $setting ),
					'type'     => 'checkbox',
				)
			);		

		}

	}

	private function archives( $wp_customize ) {

		$wp_customize->add_section(
			'equity_archives',
			array(
				'title'       => __( 'Content Archives', 'equity' ),
				'description' => __( 'These options will affect any blog listings page, including archive, author, blog, category, search, and tag pages.', 'equity' ),
				'priority'    => 400,
			)
		);

		//* Setting key and default value array
		$settings = array(
			'content_archive'           => 'full',
			'content_archive_limit'     => '',
			'content_archive_thumbnail' => 0,
			'image_size'                => '',
			'image_alignment'           => 'alignleft',
			'posts_nav'                 => 'numeric',
		);

		foreach ( $settings as $setting => $default ) {

			$wp_customize->add_setting(
				$this->get_field_name( $setting ),
				array(
					'default' => $default,
					'type'    => 'option',
				)
			);

		}

		$wp_customize->add_control(
			'equity_content_archive',
			array(
				'priority' => 1,
				'label'    => __( 'Select one of the following', 'equity' ),
				'section'  => 'equity_archives',
				'settings' => $this->get_field_name( 'content_archive' ),
				'type'     => 'select',
				'choices'  => array(
					'full'     => __( 'Display post content', 'equity' ),
					'excerpts' => __( 'Display post excerpts', 'equity' ),
				),
			)
		);

		$wp_customize->add_control(
			'equity_content_archive_limit',
			array(
				'label'    => __( 'Limit content to how many characters? (0 for no limit)', 'equity' ),
				'section'  => 'equity_archives',
				'type' => 'textarea',
				'settings' => $this->get_field_name( 'content_archive_limit' ),
			)
		);

		$wp_customize->add_control(
			'equity_content_archive_thumbnail',
			array(
				'label'    => __( 'Display the featured image?', 'equity' ),
				'section'  => 'equity_archives',
				'settings' => $this->get_field_name( 'content_archive_thumbnail' ),
				'type'     => 'checkbox',
			)
		);

		$wp_customize->add_control(
			'equity_image_size',
			array(
				'label'    => __( 'Featured image size', 'equity' ),
				'section'  => 'equity_archives',
				'settings' => $this->get_field_name( 'image_size' ),
				'type'     => 'select',
				'choices'  => equity_get_image_sizes_for_customizer(),
			)
		);

		$wp_customize->add_control(
			'equity_image_alignment',
			array(
				'label'    => __( 'Featured image alignment', 'equity' ),
				'section'  => 'equity_archives',
				'settings' => $this->get_field_name( 'image_alignment' ),
				'type'     => 'select',
				'choices'  => array(
					''           => __( '- None -', 'equity' ),
					'alignleft'  => __( 'Left', 'equity' ),
					'alignright' => __( 'Right', 'equity' ),
				),
			)
		);

		$wp_customize->add_control(
			'equity_posts_nav',
			array(
				'label'    => __( 'Post Navigation Type', 'equity' ),
				'section'  => 'equity_archives',
				'settings' => $this->get_field_name( 'posts_nav' ),
				'type'     => 'select',
				'choices'  => array(
					'prev-next' => __( 'Previous / Next', 'equity' ),
					'numeric'   => __( 'Numeric', 'equity' ),
				),
			)
		);

	}

	private function fonts( $wp_customize ) {

		//** Add Section
		$wp_customize->add_section(
			'equity_fonts',
			array(
				'title'    => __( 'Fonts', 'equity'),
				'priority' => 100,
			)
		);

		//* Add Setting
		$wp_customize->add_setting( 'google_fonts', array(
			'default'        => '',
		) );

		//* Add Control
		$wp_customize->add_control(
			new Google_Font_Dropdown_Custom_Control(
				$wp_customize,
				'google_fonts',
				array(
					'label'    => 'Google Fonts',
					'section'  => 'equity_fonts',
					'settings' => 'google_fonts',
					'priority' => 12
				)
			)
		);
	}

	private function reset( $wp_customize ) {

		//** Add Section
		$wp_customize->add_section(
			'equity_remove_all_mods',
			array(
				'title'    => __( 'Reset Customizations', 'equity'),
				'priority' => 500,
			)
		);

		$wp_customize->add_setting(
			'remove_all_mods',
			array(
				'default' => 0,
				'type'    => 'theme_mod',
			)
		);

		$wp_customize->add_control(
			'equity_remove_all_mods',
			array(
				'label'       => __( 'Reset Customizations?', 'equity'),
				'description' => __( 'To remove customizations, select the checkbox and save. <br /><em>(Excludes content archives, comments, and site layout options)</em>', 'equity'),
				'section'  => 'equity_remove_all_mods',
				'settings' => 'remove_all_mods',
				'type'     => 'checkbox',
			)
		);
		
	}

}

add_action( 'init', 'equity_customizer_init' );
/**
 * Instantiate EQUITY_Customizer
 * 
 * @since 1.0
 */
function equity_customizer_init() {
	new EQUITY_Customizer;
}

/**
 * Calculates if white or black would contrast more with the provided color.
 *
 * @since 1.7.0
 *
 * @param string $color A color in hex format.
 * @return string The hex code for the most contrasting color: black or white.
 */
function equity_color_contrast( $color ) {

	$hexcolor = str_replace( '#', '', $color );

	$red   = hexdec( substr( $hexcolor, 0, 2 ) );
	$green = hexdec( substr( $hexcolor, 2, 2 ) );
	$blue  = hexdec( substr( $hexcolor, 4, 2 ) );

	$luminosity = ( ( $red * 0.2126 ) + ( $green * 0.7152 ) + ( $blue * 0.0722 ) );

	return ( $luminosity > 128 ) ? '#000000' : '#ffffff';

}

/**
 * Generate a lighter or darker color from a starting color.
 * Used to generate complementary hover tints from user-chosen colors.
 *
 * @since 1.7.0
 *
 * @param string $color A color in hex format.
 * @param string $op The operation to apply: '+' for lighter, '-' for darker.
 * @param int    $change The amount to reduce or increase brightness by.
 * @return string Hex code for the adjusted color brightness.
 */
function equity_color_brightness( $color, $op, $change ) {

	$hexcolor = str_replace( '#', '', $color );
	$red      = hexdec( substr( $hexcolor, 0, 2 ) );
	$green    = hexdec( substr( $hexcolor, 2, 2 ) );
	$blue     = hexdec( substr( $hexcolor, 4, 2 ) );

	if ( '+' !== $op && isset( $op ) ) {
		$red   = max( 0, min( 255, $red - $change ) );
		$green = max( 0, min( 255, $green - $change ) );
		$blue  = max( 0, min( 255, $blue - $change ) );
	} else {
		$red   = max( 0, min( 255, $red + $change ) );
		$green = max( 0, min( 255, $green + $change ) );
		$blue  = max( 0, min( 255, $blue + $change ) );
	}

	$newhex = '#';
	$newhex .= strlen( dechex( $red ) ) === 1 ? '0' . dechex( $red ) : dechex( $red );
	$newhex .= strlen( dechex( $green ) ) === 1 ? '0' . dechex( $green ) : dechex( $green );
	$newhex .= strlen( dechex( $blue ) ) === 1 ? '0' . dechex( $blue ) : dechex( $blue );

	// Forces darken if brighten color is the same as color inputted.
	if ( $newhex === $hexcolor && '+' === $op ) {
		$newhex = '#111111';
	}

	return $newhex;

}

/**
 * Google Font Control for Customizer
 * 
 * @since 1.0
 */
function equity_register_font_control( $wp_customize ) {
	class Google_Font_Dropdown_Custom_Control extends WP_Customize_Control {
		private $fonts = false;

		public function __construct($manager, $id, $args = array(), $options = array()) {
			$this->fonts = $this->get_fonts();
			parent::__construct( $manager, $id, $args );
		}

		/**
		 * Render the content of the fonts dropdown
		 *
		 * @return HTML
		 */
		public function render_content() {
			if(!empty($this->fonts))
			{
				?>
					<label>
						<span class="customize-fonts-select-control"><?php echo esc_html( $this->label ); ?></span>
						<select <?php $this->link(); ?>>
							<?php
								foreach ( $this->fonts as $k => $v )
								{
									printf('<option value="%s" %s>%s</option>', $v->family, selected($this->value(), $k, false), $v->family);
								}
							?>
						</select>
					</label>
				<?php
			}
		}

		/**
		 * Get the google fonts from the API or in the cache
		 *
		 * @param  integer $amount
		 *
		 * @return String
		 */
		public function get_fonts( $amount = 50 ) {

			$fontFile = EQUITY_ADMIN_DIR . '/cache/google-web-fonts.txt';

			//Total time the file will be cached in seconds, set to a week
			$cachetime = 86400 * 7;

			if(file_exists($fontFile) && time() - $cachetime < filemtime($fontFile))
			{
				$content = json_decode(file_get_contents($fontFile));
			} else {

				$googleApi = 'https://www.googleapis.com/webfonts/v1/webfonts?sort=popularity&key=AIzaSyCQcHWrZHQSGcH9PP76kZfh9axYVuRBgrI';

				$fontContent = wp_remote_get( $googleApi, array('sslverify'   => false) );

				$fp = fopen($fontFile, 'w');
				fwrite($fp, $fontContent['body']);
				fclose($fp);

				$content = json_decode($fontContent['body']);
			}

			if($amount == 'all')
			{
				return $content->items;
			} else {
				return array_slice($content->items, 0, $amount);
			}
		}
	}
}

add_action( 'init', 'remove_all_theme_mods' );
function remove_all_theme_mods() {

	if ( 1 != get_theme_mod('remove_all_mods') ) {
		return;
	}

	remove_theme_mods();
}

add_action( 'customize_register', 'equity_customize_remove_static' );
/**
 * Remove static front page section
 *
 * @since 1.0
 */
function equity_customize_remove_static( $wp_customize ) {	
	$wp_customize->remove_section( 'static_front_page' );
}