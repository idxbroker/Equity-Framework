<?php
/**
 * Equity Framework
 *
 * WARNING: This file is part of the core Equity Framework. DO NOT edit this file under any circumstances.
 * Please do all modifications in the form of a child theme.
 *
 * @package Equity\IDX
 * @author  IDX, LLC
 * @license GPL-2.0+
 * @link    http://equityframework.com
 * 
 * Creates a widget that outputs a showcase of IDX properties
 *
 * @subpackage Widgets
 * @see Equity_Idx_Api
 */
class Equity_Showcase_Widget extends WP_Widget {

	public $_idx;

	/**
	 * Register widget with WordPress.
	 */
	public function __construct() {

		$this->_idx = new Equity_Idx_Api;

		parent::__construct(
			'equity_showcase', // Base ID
			'Equity - IDX Property Showcase', // Name
			array(
				'description' => __( 'Displays a showcase of properties', 'equity' ),
				'classname'   => 'equity-idx-showcase-widget',
				'customize_selective_refresh' => true
			)
		);

		include_once IMPRESS_IDX_DIR . 'idx/widgets/impress-widget-helper.php';
	}

	/**
	 * Returns the markup for the featured properties
	 *
	 * @param array $instance Previously saved values from database.
	 * @return string $output html markup for front end display
	 */
	public function body($instance) {

		$output = '';

		if ( ($instance['properties']) == 'savedlinks') {
			$properties = $this->_idx->saved_link_properties($instance['saved_link_id']);
			$output .= '<!-- Saved Link ID: ' . $instance['saved_link_id'] . ' -->';
		} else {
			$properties = $this->_idx->client_properties($instance['properties']);
			$output .= '';
		}

		if ( empty($properties) || (isset($properties) && $properties === 'No results returned') ) {
			return 'No properties found';
		}

		// sort low to high
		usort($properties, array($this, 'price_cmp') );

		if ( 'high-low' == $instance['order'] ) {
			$properties = array_reverse($properties);
		}

		$max = $instance['max'];
		$num_per_row = $instance['listings_per_row'];

		$total = count($properties);
		$count = 0;

		$column_class = '';

		if ( true == $instance['use_rows'] ) {

			// Max of four columns
			$number_columns = ( $num_per_row > 4 ) ? 4 : (int)$num_per_row;

			// column class
			switch ($number_columns) {
				case 0:
					$column_class = 'columns small-12 large-12';
					break;
				case 1:
					$column_class = 'columns small-12 large-12';
					break;
				case 2:
					$column_class = 'columns small-12 medium-6 large-6';
					break;
				case 3:
					$column_class = 'columns small-12 medium-4 large-4';
					break;
				case 4:
					$column_class = 'columns small-12 medium-3 large-3';
					break;
			}
		}

		foreach ($properties as $prop) {

			if ( isset( $instance['agentID'], $prop['userAgentID'] ) && ! empty( $instance['agentID'] ) ) {
				if ( $instance['agentID'] !== (int) $prop['userAgentID'] ) {
					continue;
				}
			}

			if ( !empty($max) && $count == $max ) {
				return $output;
			}

			$prop_image_url = ( isset($prop['image']['0']['url']) ) ? $prop['image']['0']['url'] : '//mlsphotos.idxbroker.com/defaultNoPhoto/noPhotoFull.png';

			if ( 1 == $instance['use_rows'] && $count == 0 && $max != '1' ) {
				$output .= '<div class="row">';
			}

			$count++;

			if(isset($prop['disclaimer']) && !empty($prop['disclaimer'])) {
				foreach($prop['disclaimer'] as $disclaimer) {
					if(is_array($disclaimer) && in_array('widget', $disclaimer)) {
						$disclaimer_text = $disclaimer['text'];
						$disclaimer_logo = $disclaimer['logoURL'];
					}
				}
			}

			if(isset($prop['courtesy']) && !empty($prop['courtesy'])) {
				foreach($prop['courtesy'] as $courtesy) {
					if(is_array($courtesy) && in_array('widget', $courtesy)) {
						$courtesy_text = $courtesy['text'];
					}
				}
			}

			// Get URL and add suffix if one exists
			if ( isset($prop['fullDetailsURL']) ) {
				$url = $prop['fullDetailsURL'];
			} else {
				$url = $this->_idx->details_url() . '/' . $prop['detailsURL'];
			}

			if ( has_filter( 'equity_idx_showcase_property_url_suffix' ) ) {
				$url = $url . apply_filters( 'equity_idx_showcase_property_url_suffix', $suffix = '', $prop, $this->_idx );
			}

			if ( 1 == $instance['show_image'] ) {
				$output .= apply_filters( 'equity_idx_showcase_property_html', sprintf(
					'<div class="showcase-property %12$s">
						<a href="%3$s" class="showcase-photo">
							<img src="%4$s" alt="%5$s" title="%5$s" />
							<span class="price">%1$s</span>
							<span class="status">%2$s</span>
						</a>
						<a href="%3$s">
							<p class="address">
								<span class="street">%6$s</span>
								<span class="cityname">%7$s</span>,
								<span class="state"> %8$s</span>
							</p>
						</a>
						<p class="beds-baths-sqft">
							<span class="beds">%9$s Beds</span>
							<span class="baths">%10$s Baths</span>
							<span class="sqft">%11$s Sq Ft</span>
						</p>
						<div class="disclaimer">%13$s %14$s %15$s</div>
					</div>',
					price_selector( $prop ),
					$prop['propStatus'],
					$url,
					$prop_image_url,
					esc_html( $prop['remarksConcat'] ),
					empty( $prop['address'] ) ? '' : $prop['address'],
					empty( $prop['cityName'] ) ? '' : $prop['cityName'],
					empty( $prop['state'] ) ? '' : $prop['state'],
					empty( $prop['bedrooms'] ) ? '' : $prop['bedrooms'],
					empty( $prop['totalBaths'] ) ? '' : $prop['totalBaths'],
					empty( $prop['sqFt'] ) ? '' : $prop['sqFt'],
					$column_class,
					(isset($disclaimer_text)) ? '<p style="display: block !important; visibility: visible !important;">' . $disclaimer_text . '</p>' : '',
					(isset($disclaimer_logo)) ? '<img class="logo" src="' . $disclaimer_logo . '" style="opacity: 1 !important; position: static !important;" />' : '',
					(isset($courtesy_text)) ? '<p class="courtesy" style="display: block !important; visibility: visible !important;">' . $courtesy_text . '</p>' : ''
				), $prop );
			} else {
				$output .= apply_filters( 'equity_idx_showcase_property_list_html', sprintf(
					'<li class="showcase-property-list %9$s">
						<a href="%2$s">
							<p>
								<span class="price">%1$s</span>
								<span class="address">
									<span class="street">%3$s</span>
									<span class="cityname">%4$s</span>,
									<span class="state"> %5$s</span>
								</span>
								<span class="beds-baths-sqft">
									<span class="beds">%6$s Beds</span>
									<span class="baths">%7$s Baths</span>
									<span class="sqft">%8$s Sq Ft</span>
								</span>
							</p>
						</a>
					</li>',
					price_selector( $prop ),
					$url,
					empty( $prop['address'] ) ? '' : $prop['address'],
					empty( $prop['cityName'] ) ? '' : $prop['cityName'],
					empty( $prop['state'] ) ? '' : $prop['state'],
					empty( $prop['bedrooms'] ) ? '' : $prop['bedrooms'],
					empty( $prop['totalBaths'] ) ? '' : $prop['totalBaths'],
					empty( $prop['sqFt'] ) ? '' : $prop['sqFt'],
					$column_class
				), $prop );
			}

			if ( 1 == $instance['use_rows'] && $count != 1 ) {

				// close a row if..
				// num_per_row is a factor of count OR
				// count is equal to the max number of listings to show OR
				// count is equal to the total number of listings available
				if ( $count % $num_per_row == 0 || $count == $total || $count == $max ) {
					$output .= '</div> <!-- .row -->';
				}

				// open a new row if..
				// num per row is a factor of count AND
				// count is not equal to max AND
				// count is not equal to total
				if ( $count % $num_per_row == 0 && $count != $max && $count != $total ) {
					$output .= '<div class="row">';
				}
			}
		}

		return $output;
	}

	/**
	 * Converts the decimal to a percent
	 *
	 * @param mixed $num decimal to convert
	 */
	function calc_percent($num) {

		$num = round($num, 2);
		$num = preg_replace('/0\./', '', $num);

		if ( strlen( (string)$num ) == 1 ) {
			$num *= 10;
		}

		$num = ( $num == 100 ) ? 100 : $num -= 4;

		return $num;
	}

	/**
	 * Compares the price fields of two arrays
	 *
	 * @param array $a
	 * @param array $b
	 * @return int
	 */
	public function price_cmp($a, $b) {

		$a = $this->clean_price($a['listingPrice']);
		$b = $this->clean_price($b['listingPrice']);

		if ( $a == $b ) {
			return 0;
		}

		return ( $a < $b ) ? -1 : 1;
	}

	/**
	 * Removes the "$" and "," from the price field
	 *
	 * @param string $price
	 * @return mixed $price the cleaned price
	 */
	public function clean_price($price) {

		$patterns = array(
			'/\$/',
			'/,/'
		);

		$price = preg_replace($patterns, '', $price);

		return $price;
	}

	/**
	 * Echos saved link names wrapped in option tags
	 *
	 * This is just a helper to keep the html clean
	 *
	 * @param var $instance
	 */
	public function saved_link_options($instance) {

		$saved_links = $this->_idx->saved_links();

		if ( !is_array($saved_links) ) {
			return;
		}

		foreach($saved_links as $saved_link) {

			// display the link name if no link title has been assigned
			$link_text = empty( $saved_link->linkTitle ) ? $saved_link->linkName : $saved_link->linkTitle;

			echo '<option ', selected($instance['saved_link_id'], $saved_link->id, 0), ' value="', $saved_link->id, '">', $link_text, '</option>';

		}
	}

	/**
	 * Front-end display of widget.
	 *
	 * @see WP_Widget::widget()
	 * @param array $args Widget arguments.
	 * @param array $instance Saved values from database.
	 */
	public function widget( $args, $instance ) {

		$defaults = array(
			'title'            => __( 'Properties', 'equity' ),
			'properties'       => 'featured',
			'saved_link_id'    => '',
			'show_image'       => '1',
			'use_rows'         => '1',
			'listings_per_row' => 4,
			'max'              => '',
			'order'            => 'high-low',
			'agentID'          => ''
		);

		$instance = wp_parse_args( (array) $instance, $defaults );
		
		extract( $args );
		$title = $instance['title'];

		echo $before_widget;

		if ( ! empty( $title ) ) {
			echo $before_title . $title . $after_title;
		}

		echo $this->body($instance);

		echo $after_widget;
	}

	/**
	 * Sanitize widget form values as they are saved.
	 *
	 * @see WP_Widget::update()
	 *
	 * @param array $new_instance Values just sent to be saved.
	 * @param array $old_instance Previously saved values from database.
	 * @return array Updated safe values to be saved.
	 */
	public function update( $new_instance, $old_instance ) {
		$instance = array();
		$instance['title']            = strip_tags( $new_instance['title'] );
		$instance['properties']       = strip_tags( $new_instance['properties'] );
		$instance['saved_link_id']    = (int) ( $new_instance['saved_link_id'] );
		$instance['show_image']       = (bool) $new_instance['show_image'];
		$instance['listings_per_row'] = (int) $new_instance['listings_per_row'];
		$instance['max']              = strip_tags( $new_instance['max'] );
		$instance['order']            = strip_tags( $new_instance['order'] );
		$instance['use_rows']         = (bool) $new_instance['use_rows'];
		$instance['agentID']          = (int) $new_instance['agentID'];

		return $instance;
	}

	/**
	 * Back-end widget form.
	 *
	 * @see WP_Widget::form()
	 * @param array $instance Previously saved values from database.
	 */
	public function form( $instance ) {

		$_idx = $this->_idx;

		$defaults = array(
			'title'            => __( 'Properties', 'equity' ),
			'properties'       => 'featured',
			'saved_link_id'    => '',
			'show_image'       => '1',
			'use_rows'         => '1',
			'listings_per_row' => 4,
			'max'              => '',
			'order'            => 'high-low',
			'agentID'          => '',
		);

		$instance = wp_parse_args( (array) $instance, $defaults );

		?>
		<p>
			<label for="<?php echo $this->get_field_id( 'title' ); ?>"><?php _e( 'Title:' ); ?></label> 
			<input class="widefat" id="<?php echo $this->get_field_id( 'title' ); ?>" name="<?php echo $this->get_field_name( 'title' ); ?>" type="text" value="<?php esc_attr_e( $instance['title'] ); ?>" />
		</p>

		<p>
			<label for="<?php echo $this->get_field_id( 'properties' ); ?>"><?php _e( 'Properties to Display:', 'equity' ); ?></label>
			<select class="widefat" id="<?php echo $this->get_field_id( 'properties' ); ?>" name="<?php echo $this->get_field_name( 'properties' ) ?>">
				<option <?php selected($instance['properties'], 'featured'); ?> value="featured"><?php _e( 'Featured', 'equity' ); ?></option>
				<option <?php selected($instance['properties'], 'soldpending'); ?> value="soldpending"><?php _e( 'Sold/Pending', 'equity' ); ?></option>
				<option <?php selected($instance['properties'], 'supplemental'); ?> value="supplemental"><?php _e( 'Supplemental', 'equity' ); ?></option>
				<option <?php selected($instance['properties'], 'savedlinks'); ?> value="savedlinks"><?php _e( 'Use Saved Link', 'equity' ); ?></option>
			</select>
		</p>

		<p>
			<label for="<?php echo $this->get_field_id( 'saved_link_id' ); ?>">Choose a saved link (if selected above):</label>
			<select class="widefat" id="<?php echo $this->get_field_id( 'saved_link_id' ); ?>" name="<?php echo $this->get_field_name( 'saved_link_id' ) ?>">
				<?php $this->saved_link_options($instance); ?>
			</select>
		</p>

		<p>
			<label for="<?php echo $this->get_field_id( 'agentID' ); ?>"><?php _e( 'Limit by Agent:', 'equity' ); ?></label>
			<select class="widefat" id="<?php echo $this->get_field_id( 'agentID' ); ?>" name="<?php echo $this->get_field_name( 'agentID' ) ?>">
				<?php echo $this->get_agents_select_list( $instance['agentID'] ); ?>
			</select>
		</p>
		
		<p>
			<input class="checkbox" type="checkbox" <?php checked($instance['show_image'], 1); ?> id="<?php echo $this->get_field_id( 'show_image' ); ?>" name="<?php echo $this->get_field_name( 'show_image' ); ?>" value="1" />
			<label for="<?php echo $this->get_field_id( 'show_image' ); ?>"><?php _e( 'Show image?', 'equity'); ?></label>
		</p>

		<p>
			<input class="checkbox" type="checkbox" <?php checked($instance['use_rows'], 1); ?> id="<?php echo $this->get_field_id( 'use_rows' ); ?>" name="<?php echo $this->get_field_name( 'use_rows' ); ?>" value="1" />
			<label for="<?php echo $this->get_field_id( 'use_rows' ); ?>"><?php _e( 'Use rows?', 'equity'); ?></label>
		</p>

		<p>
			<label for="<?php echo $this->get_field_id( 'listings_per_row' ); ?>"><?php _e( 'Listings per row:', 'equity' ); ?></label>
			<select class="widefat" id="<?php echo $this->get_field_id( 'listings_per_row' ); ?>" name="<?php echo $this->get_field_name( 'listings_per_row' ) ?>">
				<option <?php selected($instance['listings_per_row'], '2'); ?> value="2">2</option>
				<option <?php selected($instance['listings_per_row'], '3'); ?> value="3">3</option>
				<option <?php selected($instance['listings_per_row'], '4'); ?> value="4">4</option>
			</select>
		</p>

		<p>
			<label for="<?php echo $this->get_field_id( 'max' ); ?>"><?php _e( 'Max number of listings to show:' ); ?></label> 
			<input class="widefat" id="<?php echo $this->get_field_id( 'max' ); ?>" name="<?php echo $this->get_field_name( 'max' ); ?>" type="text" value="<?php esc_attr_e( $instance['max'] ); ?>" />
		</p>

		<p>
			<label for="<?php echo $this->get_field_id( 'order' ); ?>"><?php _e( 'Sort order:', 'equity' ); ?></label>
			<select class="widefat" id="<?php echo $this->get_field_id( 'order' ); ?>" name="<?php echo $this->get_field_name( 'order' ) ?>">
				<option <?php selected($instance['order'], 'high-low'); ?> value="high-low"><?php _e( 'Highest to Lowest Price', 'equity' ); ?></option>
				<option <?php selected($instance['order'], 'low-high'); ?> value="low-high"><?php _e( 'Lowest to Highest Price', 'equity' ); ?></option>
			</select>
		</p>
		<?php
	}

	public function get_agents_select_list( $agent_id ) {
		$this->idx_api = new \IDX\Idx_Api();

		$agents_array = $this->idx_api->idx_api('agents', IDX_API_DEFAULT_VERSION, 'clients', array(), 7200, 'GET', true);
		
		if ( ! is_array( $agents_array ) ) {
			return;
		}

		if($agent_id != null) {
			$agents_list = '<option value="" '. selected($agent_id, '', '') . '>All</option>';
			foreach($agents_array['agent'] as $agent) {
				$agents_list .= '<option value="' . $agent['agentID'] . '" ' . selected($agent_id, $agent['agentID'], 0) . '>' . $agent['agentDisplayName'] . '</option>';
			}
		} else {
			$agents_list = '<option value="">All</option>';
			foreach($agents_array['agent'] as $agent) {
				$agents_list .= '<option value="' . $agent['agentID'] . '">' . $agent['agentDisplayName'] . '</option>'; 
			}
		}

		return $agents_list;
	}


}