<?php
/**
 * Equity Framework
 *
 * WARNING: This file is part of the core Equity Framework. DO NOT edit this file under any circumstances.
 * Please do all modifications in the form of a child theme.
 *
 * @package Equity\IDX
 * @author  IDX, LLC
 * @license GPL-2.0+
 * @link    http://equityframework.com
 * 
 * Creates a widget that outputs a carousel of IDX properties
 *
 * @subpackage Widgets
 * @see Equity_Idx_Api
 */
class Equity_IDX_Carousel_Widget extends WP_Widget {

	public $_idx;

	/**
	 * Register widget with WordPress.
	 */
	public function __construct() {

		$this->_idx = new Equity_Idx_Api;

		parent::__construct(
			'equity_carousel', // Base ID
			'Equity - IDX Property Carousel', // Name
			array(
				'description' => __( 'Displays a carousel of properties', 'equity' ),
				'classname'   => 'equity-idx-carousel-widget',
				'customize_selective_refresh' => true,
			)
		);

		include_once IMPRESS_IDX_DIR . 'idx/widgets/impress-widget-helper.php';
	}

	/**
	 * Returns the markup for the listings
	 *
	 * @param array $instance Previously saved values from database.
	 * @return string $output html markup for front end display
	 */
	public function body( $instance ) {

		wp_enqueue_style( 'owl2-css' );
		wp_enqueue_script( 'owl2' );

		$prev_link = apply_filters( 'idx_listing_carousel_prev_link', $idx_listing_carousel_prev_link_text = __( '<i class=\"fas fa-chevron-circle-left\"></i><span>Prev</span>', 'equity' ) );
		$next_link = apply_filters( 'idx_listing_carousel_next_link', $idx_listing_carousel_next_link_text = __( '<i class=\"fas fa-chevron-circle-right\"></i><span>Next</span>', 'equity' ) );

		$output = '';

		if ( ($instance['properties']) == 'savedlinks' ) {
			$properties = $this->_idx->saved_link_properties( $instance['saved_link_id'] );
			$output .= '<!-- Saved Link ID: ' . $instance['saved_link_id'] . ' -->';
		} else {
			$properties = $this->_idx->client_properties( $instance['properties'] );
			$output .= '';
		}

		if ( empty( $properties ) || ( isset( $properties ) && $properties === 'No results returned' ) ) {
			return 'No properties found';
		}

		if( $instance['autoplay'] ) {
			$autoplay = 'autoplay: true,';
		} else {
			$autoplay = '';
		}

		$display = $instance['display'];

		// sort low to high
		usort($properties, array($this, 'price_cmp') );

		if ( 'high-low' == $instance['order'] ) {
			$properties = array_reverse($properties);
		}

		$max = $instance['max'];

		$total = count($properties);
		$count = 0;

		if ( 1 !== $total ) {
			echo '<script>
				var equityOwl=jQuery.noConflict();
				equityOwl(document).ready(function(){
					equityOwl(".equity-listing-carousel-' . $display . '").owlCarousel({
						items: ' . $display . ',
						' . $autoplay . '
						nav: true,
						navText: ["' . $prev_link . '", "' . $next_link . '"],
						loop: true,
						lazyLoad: true,
						addClassActive: true,
						itemsScaleUp: true,
						addClassActive: true,
						itemsScaleUp: true,
						navContainerClass: "owl-controls owl-nav",
						responsiveClass:true,
						responsive:{
							0:{
								items: 1,
								nav: true,
								margin: 0 
							},
							450:{
								items: ' . round( $display / 2 ) . '
							},
							800:{
								items: ' . $display . '
							}
						}
					});
				});
				</script>
			';
		}

		$output .= sprintf('<div class="equity-idx-carousel equity-listing-carousel-%s owl-carousel owl-theme">', $instance['display']);

		foreach ($properties as $prop) {

			if ( isset( $instance['agentID'], $prop['userAgentID'] ) && ! empty( $instance['agentID'] ) ) {
				if ( $instance['agentID'] !== (int) $prop['userAgentID'] ) {
					continue;
				}
			}

			if ( !empty($max) && $count == $max ) {
				$output .= '</div><!-- end .equity-idx-carousel -->';
				return $output;
			}

			$prop_image_url = ( isset($prop['image']['0']['url']) ) ? $prop['image']['0']['url'] : 'https://s3.amazonaws.com/mlsphotos.idxbroker.com/defaultNoPhoto/noPhotoFull.png';
			$image_alt_tag = apply_filters( 'equity_idx_carousel_image_alt_tag', esc_html($prop['address']), $prop );

			$count++;

			// Get URL and add suffix if one exists
			if ( isset($prop['fullDetailsURL']) ) {
				$url = $prop['fullDetailsURL'];
			} else {
				$url = $this->_idx->details_url() . '/' . $prop['detailsURL'];
			}

			if ( has_filter( 'equity_idx_carousel_property_url_suffix' ) ) {
				$url = $url . apply_filters( 'equity_idx_carousel_property_url_suffix', $suffix = '', $prop, $this->_idx );
			}

			$output .= apply_filters( 'equity_idx_carousel_property_html', sprintf(
				'<div class="carousel-property">
					<a href="%2$s" class="carousel-photo">
						<img class="lazyOwl owl-lazy" data-src="%3$s" alt="%4$s" title="%4$s" />
						<span class="price">%1$s</span>
					</a>
					<a href="%2$s">
						<p class="address">
							<span class="street">%5$s</span>
							<span class="cityname">%6$s</span>,
							<span class="state"> %7$s</span>
						</p>
					</a>
					<p class="beds-baths-sqft">
						<span class="beds">%8$s Beds</span>
						<span class="baths">%9$s Baths</span>
						<span class="sqft">%10$s Sq Ft</span>
						<span class="acres">%11$s Acres</span>
					</p>
					%12$s
				</div>',
				price_selector( $prop ),
				$url,
				$prop_image_url,
				$image_alt_tag,
				empty( $prop['address'] ) ? '' : $prop['address'],
				empty( $prop['cityName'] ) ? '' : $prop['cityName'],
				empty( $prop['state'] ) ? '' : $prop['state'],
				empty( $prop['bedrooms'] ) ? '' : $prop['bedrooms'],
				empty( $prop['totalBaths'] ) ? '' : $prop['totalBaths'],
				empty( $prop['sqFt'] ) ? '' : $prop['sqFt'],
				empty( $prop['acres'] ) ? '' : $prop['acres'],
				$this->maybe_add_disclaimer_and_courtesy( $prop )
			), $prop, $instance, $url, $this->maybe_add_disclaimer_and_courtesy( $prop ) );

		}

		$output .= '</div><!-- end .equity-idx-carousel -->';

		return $output;
	}

	/**
	 * Compares the price fields of two arrays
	 *
	 * @param array $a
	 * @param array $b
	 * @return int
	 */
	public function price_cmp($a, $b) {

		$a = $this->clean_price($a['listingPrice']);
		$b = $this->clean_price($b['listingPrice']);

		if ( $a == $b ) {
			return 0;
		}

		return ( $a < $b ) ? -1 : 1;
	}

	/**
	 * Removes the "$" and "," from the price field
	 *
	 * @param string $price
	 * @return mixed $price the cleaned price
	 */
	public function clean_price($price) {

		$patterns = array(
			'/\$/',
			'/,/'
		);

		$price = preg_replace($patterns, '', $price);

		return $price;
	}

	/**
	 * Echos saved link names wrapped in option tags
	 *
	 * This is just a helper to keep the html clean
	 *
	 * @param var $instance
	 */
	public function saved_link_options($instance) {

		$saved_links = $this->_idx->saved_links();

		if ( !is_array($saved_links) ) {
			return;
		}

		foreach($saved_links as $saved_link) {

			// display the link name if no link title has been assigned
			$link_text = empty( $saved_link->linkTitle ) ? $saved_link->linkName : $saved_link->linkTitle;

			echo '<option ', selected($instance['saved_link_id'], $saved_link->id, 0), ' value="', $saved_link->id, '">', $link_text, '</option>';

		}
	}

	/**
	 * Front-end display of widget.
	 *
	 * @see WP_Widget::widget()
	 * @param array $args Widget arguments.
	 * @param array $instance Saved values from database.
	 */
	public function widget( $args, $instance ) {

		$defaults = array(
			'title'            => __( 'Properties', 'equity' ),
			'properties'       => 'featured',
			'saved_link_id'    => '',
			'display'          => 3,
			'max'              => 15,
			'order'            => 'high-low',
			'autoplay'         => 1,
			'agentID'          => ''
		);

		$instance = wp_parse_args( (array) $instance, $defaults );

		extract( $args );
		$title = $instance['title'];

		echo $before_widget;

		if ( ! empty( $title ) ) {
			echo $before_title . $title . $after_title;
		}

		echo $this->body($instance);

		echo $after_widget;
	}

	/**
	 * Sanitize widget form values as they are saved.
	 *
	 * @see WP_Widget::update()
	 *
	 * @param array $new_instance Values just sent to be saved.
	 * @param array $old_instance Previously saved values from database.
	 * @return array Updated safe values to be saved.
	 */
	public function update( $new_instance, $old_instance ) {
		$instance = array();
		$instance['title']            = strip_tags( $new_instance['title'] );
		$instance['properties']       = strip_tags( $new_instance['properties'] );
		$instance['saved_link_id']    = (int) ( $new_instance['saved_link_id'] );
		$instance['display']          = (int) ( $new_instance['display'] );
		$instance['max']              = (int) ( $new_instance['max'] );
		$instance['order']            = strip_tags( $new_instance['order'] );
		$instance['autoplay']         = $new_instance['autoplay'];
		$instance['agentID']          = (int) $new_instance['agentID'];

		return $instance;
	}

	/**
	 * Back-end widget form.
	 *
	 * @see WP_Widget::form()
	 * @param array $instance Previously saved values from database.
	 */
	public function form( $instance ) {

		$_idx = $this->_idx;

		$defaults = array(
			'title'            => __( 'Properties', 'equity' ),
			'properties'       => 'featured',
			'saved_link_id'    => '',
			'display'          => 3,
			'max'              => 15,
			'order'            => 'high-low',
			'autoplay'         => 1,
			'agentID'          => ''
		);

		$instance = wp_parse_args( (array) $instance, $defaults );

		?>
		<p>
			<label for="<?php echo $this->get_field_id( 'title' ); ?>"><?php _e( 'Title:' ); ?></label> 
			<input class="widefat" id="<?php echo $this->get_field_id( 'title' ); ?>" name="<?php echo $this->get_field_name( 'title' ); ?>" type="text" value="<?php esc_attr_e( $instance['title'] ); ?>" />
		</p>

		<p>
			<label for="<?php echo $this->get_field_id( 'properties' ); ?>"><?php _e( 'Properties to Display:', 'equity' ); ?></label>
			<select class="widefat" id="<?php echo $this->get_field_id( 'properties' ); ?>" name="<?php echo $this->get_field_name( 'properties' ) ?>">
				<option <?php selected($instance['properties'], 'featured'); ?> value="featured"><?php _e( 'Featured', 'equity' ); ?></option>
				<option <?php selected($instance['properties'], 'soldpending'); ?> value="soldpending"><?php _e( 'Sold/Pending', 'equity' ); ?></option>
				<option <?php selected($instance['properties'], 'supplemental'); ?> value="supplemental"><?php _e( 'Supplemental', 'equity' ); ?></option>
				<option <?php selected($instance['properties'], 'savedlinks'); ?> value="savedlinks"><?php _e( 'Use Saved Link', 'equity' ); ?></option>
			</select>
		</p>

		<p>
			<label for="<?php echo $this->get_field_id( 'saved_link_id' ); ?>">Choose a saved link (if selected above):</label>
			<select class="widefat" id="<?php echo $this->get_field_id( 'saved_link_id' ); ?>" name="<?php echo $this->get_field_name( 'saved_link_id' ) ?>">
				<?php $this->saved_link_options($instance); ?>
			</select>
		</p>

		<p>
			<label for="<?php echo $this->get_field_id( 'agentID' ); ?>"><?php _e( 'Limit by Agent:', 'equity' ); ?></label>
			<select class="widefat" id="<?php echo $this->get_field_id( 'agentID' ); ?>" name="<?php echo $this->get_field_name( 'agentID' ) ?>">
				<?php echo $this->get_agents_select_list( $instance['agentID'] ); ?>
			</select>
		</p>

		<p>
			<label for="<?php echo $this->get_field_id( 'display' ); ?>"><?php _e( 'Listings to show without scrolling:', 'equity' ); ?></label>
			<input class="widefat" type="text" id="<?php echo $this->get_field_id( 'display' ); ?>" name="<?php echo $this->get_field_name( 'display' ) ?>" value="<?php esc_attr_e( $instance['display'] ); ?>" size="3">
		</p>

		<p>
			<label for="<?php echo $this->get_field_id( 'max' ); ?>"><?php _e( 'Max number of listings to show:' ); ?></label> 
			<input class="widefat" id="<?php echo $this->get_field_id( 'max' ); ?>" name="<?php echo $this->get_field_name( 'max' ); ?>" type="text" value="<?php esc_attr_e( $instance['max'] ); ?>" />
		</p>

		<p>
			<label for="<?php echo $this->get_field_id( 'order' ); ?>"><?php _e( 'Sort order:', 'equity' ); ?></label>
			<select class="widefat" id="<?php echo $this->get_field_id( 'order' ); ?>" name="<?php echo $this->get_field_name( 'order' ) ?>">
				<option <?php selected($instance['order'], 'high-low'); ?> value="high-low"><?php _e( 'Highest to Lowest Price', 'equity' ); ?></option>
				<option <?php selected($instance['order'], 'low-high'); ?> value="low-high"><?php _e( 'Lowest to Highest Price', 'equity' ); ?></option>
			</select>
		</p>

		<p>
			<label for="<?php echo $this->get_field_id( 'autoplay' ); ?>"><?php _e( 'Autoplay?', 'equity' ); ?></label>
			<input type="checkbox" id="<?php echo $this->get_field_id( 'autoplay' ); ?>" name="<?php echo $this->get_field_name( 'autoplay' ) ?>" value="1" <?php checked( $instance['autoplay'], true ); ?>>
		</p>

		<?php 
	}

	public function get_agents_select_list( $agent_id ) {
		$this->idx_api = new \IDX\Idx_Api();

		$agents_array = $this->idx_api->idx_api('agents', IDX_API_DEFAULT_VERSION, 'clients', array(), 7200, 'GET', true);

		if ( ! is_array( $agents_array ) ) {
			return;
		}
		
		if($agent_id != null) {
			$agents_list = '<option value="" '. selected($agent_id, '', '') . '>All</option>';
			foreach($agents_array['agent'] as $agent) {
				$agents_list .= '<option value="' . $agent['agentID'] . '" ' . selected($agent_id, $agent['agentID'], 0) . '>' . $agent['agentDisplayName'] . '</option>';
			}
		} else {
			$agents_list = '<option value="">All</option>';
			foreach($agents_array['agent'] as $agent) {
				$agents_list .= '<option value="' . $agent['agentID'] . '">' . $agent['agentDisplayName'] . '</option>'; 
			}
		}

		return $agents_list;
	}

	/**
	 * Output disclaimer and courtesy if applicable
	 *
	 * @param  array $prop The current property in the loop
	 * @return string       HTML of disclaimer, logo, and courtesy
	 */
	public function maybe_add_disclaimer_and_courtesy( $prop ) {
		//Add Disclaimer when applicable.
		if(isset($prop['disclaimer']) && !empty($prop['disclaimer'])) {
			foreach($prop['disclaimer'] as $disclaimer) {
				if(in_array('widget', $disclaimer)) {
					$disclaimer_text = $disclaimer['text'];
					$disclaimer_logo = $disclaimer['logoURL'];
				}
			}
		}
		//Add Courtesy when applicable.
		if(isset($prop['courtesy']) && !empty($prop['courtesy'])) {
			foreach($prop['courtesy'] as $courtesy) {
				if(in_array('widget', $courtesy)) {
					$courtesy_text = $courtesy['text'];
				}
			}
		}

		$output = '';

		if ( isset( $disclaimer_text ) ) {
			$output .= '<p style="display: block !important; visibility: visible !important; opacity: 1 !important; position: static !important;">' . $disclaimer_text . '</p>';
		}
		if ( isset( $disclaimer_logo ) ) {
			$output .= '<img class="logo" src="' . $disclaimer_logo . '" style="opacity: 1 !important; position: static !important;" />';
		}
		if ( isset( $courtesy_text ) ) {
			$output .= '<p class="courtesy" style="display: block !important; visibility: visible !important;">' . $courtesy_text . '</p>';
		}

		if ( $output == '' ) {
			return;
		} else {
			return '<div class="disclaimer">' . $output . '</div>';
		}
	}
}