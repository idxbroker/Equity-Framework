<?php
/**
 * Equity Framework
 *
 * WARNING: This file is part of the core Equity Framework. DO NOT edit this file under any circumstances.
 * Please do all modifications in the form of a child theme.
 *
 * @package Equity\Shortcodes
 * @author  IDX, LLC
 * @license GPL-2.0+
 * @link    
 */

add_shortcode( 'post_date', 'equity_post_date_shortcode' );
/**
 * Produces the date of post publication.
 *
 * Supported shortcode attributes are:
 *   after (output after link, default is empty string),
 *   before (output before link, default is empty string),
 *   format (date format, default is value in date_format option field),
 *   label (text following 'before' output, but before date).
 *
 * Output passes through 'equity_post_date_shortcode' filter before returning.
 *
 * @since 1.0
 *
 * @param array|string $atts Shortcode attributes. Empty string if no attributes.
 * @return string Shortcode output
 */
function equity_post_date_shortcode( $atts ) {

	$defaults = array(
		'after'  => '',
		'before' => '<i class="far fa-calendar"></i> ',
		'format' => get_option( 'date_format' ),
		'label'  => '',
	);

	$atts = shortcode_atts( $defaults, $atts, 'post_date' );

	$display = ( 'relative' === $atts['format'] ) ? equity_human_time_diff( get_the_time( 'U' ), current_time( 'timestamp' ) ) . ' ' . __( 'ago', 'equity' ) : get_the_time( $atts['format'] );

	$output = sprintf( '<time %s class="post-date updated">', equity_attr( 'entry-time' ) ) . $atts['before'] . $atts['label'] . $display . $atts['after'] . '</time>';

	return apply_filters( 'equity_post_date_shortcode', $output, $atts );

}

add_shortcode( 'post_time', 'equity_post_time_shortcode' );
/**
 * Produces the time of post publication.
 *
 * Supported shortcode attributes are:
 *   after (output after link, default is empty string),
 *   before (output before link, default is empty string),
 *   format (date format, default is value in date_format option field),
 *   label (text following 'before' output, but before date).
 *
 * Output passes through 'equity_post_time_shortcode' filter before returning.
 *
 * @since 1.0
 *
 * @param array|string $atts Shortcode attributes. Empty string if no attributes.
 * @return string Shortcode output
 */
function equity_post_time_shortcode( $atts ) {

	$defaults = array(
		'after'  => '',
		'before' => '<i class="far fa-clock"></i> ',
		'format' => get_option( 'time_format' ),
		'label'  => '',
	);

	$atts = shortcode_atts( $defaults, $atts, 'post_time' );

	if ( equity_html5() )
		$output = sprintf( '<time %s>', equity_attr( 'entry-time' ) ) . $atts['before'] . $atts['label'] . get_the_time( $atts['format'] ) . $atts['after'] . '</time>';
	else
		$output = sprintf( '<span class="date post-date updated published time" title="%5$s">%1$s%3$s%4$s%2$s</span> ', $atts['before'], $atts['after'], $atts['label'], get_the_time( $atts['format'] ), get_the_time( 'c' ) );

	return apply_filters( 'equity_post_time_shortcode', $output, $atts );

}

add_shortcode( 'post_modified_date', 'equity_post_modified_date_shortcode' );
/**
 * Produce the post last modified date.
 *
 * Supported shortcode attributes are:
 *  * after (output after date, default is empty string),
 *  * before (output before date, default is empty string),
 *  * format (date format, default is value in date_format option field),
 *  * label (text following 'before' output, but before date).
 *
 * Output passes through 'equity_post_modified_date_shortcode' filter before returning.
 *
 * @since 1.0
 *
 * @param array|string $atts Shortcode attributes. Empty string if no attributes.
 * @return string Shortcode output
 */
function equity_post_modified_date_shortcode( $atts ) {

	$defaults = array(
		'after'  => '',
		'before' => '<i class="fas fa-calendar"></i> ',
		'format' => get_option( 'date_format' ),
		'label'  => '',
	);

	$atts = shortcode_atts( $defaults, $atts, 'post_modified_date' );

	$display = ( 'relative' === $atts['format'] ) ? equity_human_time_diff( get_the_modified_time( 'U' ), current_time( 'timestamp' ) ) . ' ' . __( 'ago', 'equity' ) : get_the_modified_time( $atts['format'] );

	$output = sprintf( '<time %s class="post-date updated">', equity_attr( 'entry-modified-time' ) ) . $atts['before'] . $atts['label'] . $display . $atts['after'] . '</time>';

	/**
	 * Change the output of the post_modified_date shortcode.
	 *
	 * @since 1.0
	 *
	 * @param string $output Markup containing post last modification date.
	 * @param array $atts {
	 *     Shortcode attributes after mergining with default values.
	 *
	 *     @type string $after Output after date.
	 *     @type string $before Output before date.
	 *     @type string $format Date format, could be 'relative'.
	 *     @type string $label Text following 'before' output, but before date.
	 * }
	 */
	return apply_filters( 'equity_post_modified_date_shortcode', $output, $atts );

}

add_shortcode( 'post_modified_time', 'equity_post_modified_time_shortcode' );
/**
 * Produce the post last modified time.
 *
 * Supported shortcode attributes are:
 *  * after (output after time, default is empty string),
 *  * before (output before time, default is empty string),
 *  * format (date format, default is value in date_format option field),
 *  * label (text following 'before' output, but before time).
 *
 * Output passes through 'equity_post_modified_time_shortcode' filter before returning.
 *
 * @since 1.0
 *
 * @param array|string $atts Shortcode attributes. Empty string if no attributes.
 * @return string Shortcode output
 */
function equity_post_modified_time_shortcode( $atts ) {

	$defaults = array(
		'after'  => '',
		'before' => '<i class="far fa-clock"></i> ',
		'format' => get_option( 'time_format' ),
		'label'  => '',
	);

	$atts = shortcode_atts( $defaults, $atts, 'post_modified_time' );

	$output = sprintf( '<time %s class="post-date updated">', equity_attr( 'entry-modified-time' ) ) . $atts['before'] . $atts['label'] . get_the_modified_time( $atts['format'] ) . $atts['after'] . '</time>';

	/**
	 * Change the output of the post_modified_time shortcode.
	 *
	 * @since 1.0
	 *
	 * @param string $output Markup containing post last modification time.
	 * @param array $atts {
	 *     Shortcode attributes after mergining with default values.
	 *
	 *     @type string $after Output after time.
	 *     @type string $before Output before time.
	 *     @type string $format Date format, could be 'relative'.
	 *     @type string $label Text following 'before' output, but before time.
	 * }
	 */
	return apply_filters( 'equity_post_modified_time_shortcode', $output, $atts );

}

add_shortcode( 'post_author', 'equity_post_author_shortcode' );
/**
 * Produces the author of the post (unlinked display name).
 *
 * Supported shortcode attributes are:
 *   after (output after link, default is empty string),
 *   before (output before link, default is empty string).
 *
 * Output passes through 'equity_post_author_shortcode' filter before returning.
 *
 * @since 1.0
 *
 * @param array|string $atts Shortcode attributes. Empty string if no attributes.
 * @return string Shortcode output
 */
function equity_post_author_shortcode( $atts ) {

	$defaults = array(
		'after'  => '',
		'before' => '<i class="fas fa-user"></i> ',
	);

	$atts = shortcode_atts( $defaults, $atts, 'post_author' );

	$author = get_the_author();

	$output  = sprintf( '<span %s>', equity_attr( 'entry-author' ) );
	$output .= $atts['before'];
	$output .= sprintf( '<span %s>', equity_attr( 'entry-author-name author fn' ) ) . esc_html( $author ) . '</span>';
	$output .= $atts['after'];
	$output .= '</span>';

	return apply_filters( 'equity_post_author_shortcode', $output, $atts );

}

add_shortcode( 'post_author_posts_link', 'equity_post_author_posts_link_shortcode' );
/**
 * Produces the author of the post (link to author archive).
 *
 * Supported shortcode attributes are:
 *   after (output after link, default is empty string),
 *   before (output before link, default is empty string).
 *
 * Output passes through 'equity_post_author_posts_link_shortcode' filter before returning.
 *
 * @since 1.0
 *
 * @param array|string $atts Shortcode attributes. Empty string if no attributes.
 * @return string Shortcode output
 */
function equity_post_author_posts_link_shortcode( $atts ) {

	$defaults = array(
		'after'  => '',
		'before' => '<i class="fas fa-user"></i> ',
	);

	$atts = shortcode_atts( $defaults, $atts, 'post_author_posts_link' );

	$author = get_the_author();
	$url    = get_author_posts_url( get_the_author_meta( 'ID' ) );

	$output  = sprintf( '<span %s>', equity_attr( 'entry-author' ) );
	$output .= $atts['before'];
	$output .= sprintf( '<a href="%s" %s>', $url, equity_attr( 'entry-author-link' ) );
	$output .= sprintf( '<span %s>', equity_attr( 'entry-author-name author fn' ) );
	$output .= esc_html( $author );
	$output .= '</span></a>' . $atts['after'] . '</span>';

	return apply_filters( 'equity_post_author_posts_link_shortcode', $output, $atts );

}

add_shortcode( 'post_comments', 'equity_post_comments_shortcode' );
/**
 * Produces the link to the current post comments.
 *
 * Supported shortcode attributes are:
 *   after (output after link, default is empty string),
 *   before (output before link, default is empty string),
 *   hide_if_off (hide link if comments are off, default is 'enabled' (true)),
 *   more (text when there is more than 1 comment, use % character as placeholder
 *     for actual number, default is '% Comments')
 *   one (text when there is exactly one comment, default is '1 Comment'),
 *   zero (text when there are no comments, default is 'Leave a Comment').
 *
 * Output passes through 'equity_post_comments_shortcode' filter before returning.
 *
 * @since 1.0
 *
 * @param array|string $atts Shortcode attributes. Empty string if no attributes.
 * @return string Shortcode output
 */
function equity_post_comments_shortcode( $atts ) {

	$defaults = array(
		'after'       => '',
		'before'      => '<i class="far fa-comment"></i> ',
		'hide_if_off' => 'enabled',
		'more'        => __( '% Comments', 'equity' ),
		'one'         => __( '1 Comment', 'equity' ),
		'zero'        => __( 'Leave a Comment', 'equity' ),
	);
	$atts = shortcode_atts( $defaults, $atts, 'post_comments' );

	if ( ( ! equity_get_option( 'comments_posts' ) || ! comments_open() ) && 'enabled' === $atts['hide_if_off'] )
		return;

	// Darn you, WordPress!
	ob_start();
	comments_number( $atts['zero'], $atts['one'], $atts['more'] );
	$comments = ob_get_clean();

	$comments = sprintf( '<a href="%s">%s</a>', get_comments_link(), $comments );

	$output = equity_markup( array(
		'html5' => '<span class="entry-comments-link">' . $atts['before'] . $comments . $atts['after'] . '</span>',
		'echo'  => false,
	) );

	return apply_filters( 'equity_post_comments_shortcode', $output, $atts );

}

add_shortcode( 'post_tags', 'equity_post_tags_shortcode' );
/**
 * Produces the tag links list.
 *
 * Supported shortcode attributes are:
 *   after (output after link, default is empty string),
 *   before (output before link, default is 'Tags: '),
 *   sep (separator string between tags, default is ', ').
 *
 * Output passes through 'equity_post_tags_shortcode' filter before returning.
 *
 * @since 1.0
 *
 * @param array|string $atts Shortcode attributes. Empty string if no attributes.
 * @return string Shortcode output
 */
function equity_post_tags_shortcode( $atts ) {

	$defaults = array(
		'after'  => '',
		'before' => __( '<i class="fas fa-tag"></i> Tagged: ', 'equity' ),
		'sep'    => ', ',
	);
	$atts = shortcode_atts( $defaults, $atts, 'post_tags' );

	$tags = get_the_tag_list( $atts['before'], trim( $atts['sep'] ) . ' ', $atts['after'] );

	//* Do nothing if no tags
	if ( ! $tags )
		return;

	$output = sprintf( '<span %s>', equity_attr( 'entry-tags' ) ) . $tags . '</span>';

	return apply_filters( 'equity_post_tags_shortcode', $output, $atts );

}

add_shortcode( 'post_terms', 'equity_post_terms_shortcode' );
/**
 * Produces the linked post taxonomy terms list.
 *
 * Supported shortcode attributes are:
 *   after (output after link, default is empty string),
 *   before (output before link, default is 'Tagged With: '),
 *   sep (separator string between terms, default is ', '),
 *   taxonomy (name of the taxonomy, default is 'category').
 *
 * Output passes through 'equity_post_terms_shortcode' filter before returning.
 *
 * @since 1.0
 *
 * @param array|string $atts Shortcode attributes. Empty string if no attributes.
 * @return string|boolean Shortcode output or false on failure to retrieve terms
 */
function equity_post_terms_shortcode( $atts ) {

	$defaults = array(
			'after'    => '',
			'before'   => __( '<i class="far fa-folder-open"></i> Posted in: ', 'equity' ),
			'sep'      => ', ',
			'taxonomy' => 'category',
	);

	$atts = shortcode_atts( $defaults, $atts, 'post_terms' );

	$terms = get_the_term_list( get_the_ID(), $atts['taxonomy'], $atts['before'], trim( $atts['sep'] ) . ' ', $atts['after'] );

	if ( is_wp_error( $terms ) )
			return;

	if ( empty( $terms ) )
			return;

	$output = sprintf( '<span %s>', equity_attr( 'entry-terms' ) ) . $terms . '</span>';

	return apply_filters( 'equity_post_terms_shortcode', $output, $terms, $atts );

}

add_shortcode( 'post_edit', 'equity_post_edit_shortcode' );
/**
 * Produces the edit post link for logged in users.
 *
 * Supported shortcode attributes are:
 *   after (output after link, default is empty string),
 *   before (output before link, default is 'Tagged With: '),
 *   link (link text, default is '(Edit)').
 *
 * Output passes through 'equity_post_edit_shortcode' filter before returning.
 *
 * @since 1.0
 *
 * @param array|string $atts Shortcode attributes. Empty string if no attributes.
 * @return string Shortcode output
 */
function equity_post_edit_shortcode( $atts ) {

	if ( ! apply_filters( 'equity_edit_post_link', true ) )
		return;

	$defaults = array(
		'after'  => '',
		'before' => '',
		'link'   => __( '(Edit)', 'equity' ),
	);

	$atts = shortcode_atts( $defaults, $atts, 'post_edit' );

	//* Darn you, WordPress!
	ob_start();
	edit_post_link( $atts['link'], $atts['before'], $atts['after'] );
	$edit = ob_get_clean();

	$output = $edit;

	return apply_filters( 'equity_post_edit_shortcode', $output, $atts );

}
